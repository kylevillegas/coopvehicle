<!DOCTYPE html SYSTEM "about:legacy-compat"><html lang="en" class="win-std-desktop-val"><head>
<META http-equiv="Content-Type" content="text/html">
<title>Source View: https://login.dotomi.com/profile/visit/js/1_0?dtm_cid=81371&amp;dtm_cmagic=ab1fb5&amp;dtm_fid=3569&amp;cachebuster=%n</title><meta name="robots" content="noindex,nofollow"><meta name="SortSite-IgnoreRule-Page" content="AccHtmlLinkTextReused,AccAdvancedReadingLevel,Section508-m-3,BugHtmlColgroup,BugIeCssMinMaxWidthHeight,ErrSpellingError,SeoBingTitleLength,SeoPage150k,UseGov5.1,UseGov9.2.3,UseGov10.11,UseGov11.7,UseGov14.3,UseGov17.4,UseGunningFog,W3cTitleTooLong"><link rel="icon" href="https://www-powermapper-com.azureedge.net/favicon.ico"><link rel="stylesheet" href="../Report/report-min-20200618.css"><script type="text/javascript" src="../Report/report-min-20210409.js"></script><!--[if lte IE 8]>
            <script>
                document.createElement('header');
                document.createElement('aside');
            </script>
            <![endif]--></head><body class="source"><a class="accessible" href="#content">Skip to Content</a><header><h1>
                        JavaScript File
                    </h1><table><tr><th>
                        URL:
                    </th><td><a rel="nofollow" target="_top" href="https://login.dotomi.com/profile/visit/js/1_0?dtm_cid=81371&amp;dtm_cmagic=ab1fb5&amp;dtm_fid=3569&amp;cachebuster=%n">https://login.dotomi.com/profile/visit/js/1_0?dtm_cid=81371&amp;dtm_cmagic=ab1fb5&amp;dtm_fid=3569&amp;cachebuster=%n</a></td></tr><tr><th>
                        HTTP Status:
                    </th><td>200 OK</td></tr><tr><th>
                        MIME Type:
                    </th><td>application/javascript </td></tr><tr><th>
                        Last Modified:
                    </th><td>Mon, 01 Jan 1601 00:00:00 GMT</td></tr><tr><th>
                        Download Time:
                    </th><td>
                                Less than a second
                            </td></tr><tr><th>
                        Cookies:
                    </th><td> DotomiUser=413706793664201059 </td></tr><tr><th>
                        Size:
                    </th><td>38 KB
                        </td></tr><tr><th>
                        HTTP Headers:
                    </th><td><button class="chevron toggleChevron" data-toggleid="HttpHeaders"><img width="20" height="20" alt="View Headers" id="chevHttpHeaders" src="../Report/chevron-down.svg"></button>&nbsp;<span>7&nbsp;headers</span><div class="links" id="expand-HttpHeaders">Cache-Control: no-cache, private, max-age=0, no-store<br>Connection: close<br>Date: Tue, 22 Nov 2022 17:59:39 GMT<br>P3P: policyref="/w3c/p3p.xml", CP="NOI DSP NID OUR STP"<br>Pragma: no-cache<br>Server: nginx<br>Set-Cookie: DotomiUser=413706793664201059$0$2005613252$$1; Expires=Wed, 20 Dec 2023 17:59:39 GMT; Path=/; Domain=.dotomi.com; Secure; SameSite=None;<br></div></td></tr><tr><th>
                        Links In:
                    </th><td><button class="chevron toggleChevron" data-toggleid="LinksIn"><img width="20" height="20" alt="View Links" id="chevLinksIn" src="../Report/chevron-down.svg"></button>&nbsp;<span>5&nbsp;pages</span><div class="links" id="expand-LinksIn"><a class="viewsource" rel="nofollow" target="_top" href="https://coop-fe.2x9s.io/booking/62e94192ab77980020f4de78" data-pageid="2" data-line="0" data-col="0">https://coop-fe.2x9s.io/booking/62e94192ab77980020f4de78</a><br><a class="viewsource" rel="nofollow" target="_top" href="https://coop-fe.2x9s.io/list-a-vehicle" data-pageid="11" data-line="0" data-col="0">https://coop-fe.2x9s.io/list-a-vehicle</a><br><a class="viewsource" rel="nofollow" target="_top" href="https://coop-fe.2x9s.io/login" data-pageid="12" data-line="0" data-col="0">https://coop-fe.2x9s.io/login</a><br><a class="viewsource" rel="nofollow" target="_top" href="https://coop-fe.2x9s.io/find" data-pageid="13" data-line="0" data-col="0">https://coop-fe.2x9s.io/find</a><br><a class="viewsource" rel="nofollow" target="_top" href="https://coop-fe.2x9s.io/sortsite-broken-404-probe-a3e453d567.none" data-pageid="87" data-line="0" data-col="0">https://coop-fe.2x9s.io/sortsite-broken-404-probe-a3e453d567.none</a><br></div></td></tr><tr><td>&nbsp;</td><td>&nbsp;</td></tr><tr class="middle"><th><img alt="OK" width="20" height="20" src="../Report/bench-better.svg">
                                Issues:
                            </th><td>
                                No issues found
                            </td></tr></table></header><main id="content" class="pre"><p><code>1</code><code>(function () {</code></p><p><code>2</code><code>  'use strict';</code></p><p><code>3</code><code>          </code></p><p><code>4</code><code>  function ownKeys(object, enumerableOnly) {</code></p><p><code>5</code><code>    var keys = Object.keys(object);</code></p><p><code>6</code><code>    if (Object.getOwnPropertySymbols) {</code></p><p><code>7</code><code>      var symbols = Object.getOwnPropertySymbols(object);</code></p><p><code>8</code><code>      enumerableOnly &amp;&amp; (symbols = symbols.filter(function (sym) {</code></p><p><code>9</code><code>        return Object.getOwnPropertyDescriptor(object, sym).enumerable;</code></p><p><code>10</code><code>      })), keys.push.apply(keys, symbols);</code></p><p><code>11</code><code>    }</code></p><p><code>12</code><code>    return keys;</code></p><p><code>13</code><code>  }</code></p><p><code>14</code><code>  function _objectSpread2(target) {</code></p><p><code>15</code><code>    for (var i = 1; i &lt; arguments.length; i++) {</code></p><p><code>16</code><code>      var source = null != arguments[i] ? arguments[i] : {};</code></p><p><code>17</code><code>      i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {</code></p><p><code>18</code><code>        _defineProperty(target, key, source[key]);</code></p><p><code>19</code><code>      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {</code></p><p><code>20</code><code>        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));</code></p><p><code>21</code><code>      });</code></p><p><code>22</code><code>    }</code></p><p><code>23</code><code>    return target;</code></p><p><code>24</code><code>  }</code></p><p><code>25</code><code>  function _classCallCheck(instance, Constructor) {</code></p><p><code>26</code><code>    if (!(instance instanceof Constructor)) {</code></p><p><code>27</code><code>      throw new TypeError("Cannot call a class as a function");</code></p><p><code>28</code><code>    }</code></p><p><code>29</code><code>  }</code></p><p><code>30</code><code>  function _defineProperties(target, props) {</code></p><p><code>31</code><code>    for (var i = 0; i &lt; props.length; i++) {</code></p><p><code>32</code><code>      var descriptor = props[i];</code></p><p><code>33</code><code>      descriptor.enumerable = descriptor.enumerable || false;</code></p><p><code>34</code><code>      descriptor.configurable = true;</code></p><p><code>35</code><code>      if ("value" in descriptor) descriptor.writable = true;</code></p><p><code>36</code><code>      Object.defineProperty(target, descriptor.key, descriptor);</code></p><p><code>37</code><code>    }</code></p><p><code>38</code><code>  }</code></p><p><code>39</code><code>  function _createClass(Constructor, protoProps, staticProps) {</code></p><p><code>40</code><code>    if (protoProps) _defineProperties(Constructor.prototype, protoProps);</code></p><p><code>41</code><code>    if (staticProps) _defineProperties(Constructor, staticProps);</code></p><p><code>42</code><code>    Object.defineProperty(Constructor, "prototype", {</code></p><p><code>43</code><code>      writable: false</code></p><p><code>44</code><code>    });</code></p><p><code>45</code><code>    return Constructor;</code></p><p><code>46</code><code>  }</code></p><p><code>47</code><code>  function _defineProperty(obj, key, value) {</code></p><p><code>48</code><code>    if (key in obj) {</code></p><p><code>49</code><code>      Object.defineProperty(obj, key, {</code></p><p><code>50</code><code>        value: value,</code></p><p><code>51</code><code>        enumerable: true,</code></p><p><code>52</code><code>        configurable: true,</code></p><p><code>53</code><code>        writable: true</code></p><p><code>54</code><code>      });</code></p><p><code>55</code><code>    } else {</code></p><p><code>56</code><code>      obj[key] = value;</code></p><p><code>57</code><code>    }</code></p><p><code>58</code><code>    return obj;</code></p><p><code>59</code><code>  }</code></p><p><code>60</code><code>  function _extends() {</code></p><p><code>61</code><code>    _extends = Object.assign ? Object.assign.bind() : function (target) {</code></p><p><code>62</code><code>      for (var i = 1; i &lt; arguments.length; i++) {</code></p><p><code>63</code><code>        var source = arguments[i];</code></p><p><code>64</code><code>        for (var key in source) {</code></p><p><code>65</code><code>          if (Object.prototype.hasOwnProperty.call(source, key)) {</code></p><p><code>66</code><code>            target[key] = source[key];</code></p><p><code>67</code><code>          }</code></p><p><code>68</code><code>        }</code></p><p><code>69</code><code>      }</code></p><p><code>70</code><code>      return target;</code></p><p><code>71</code><code>    };</code></p><p><code>72</code><code>    return _extends.apply(this, arguments);</code></p><p><code>73</code><code>  }</code></p><p><code>74</code><code>  function _slicedToArray(arr, i) {</code></p><p><code>75</code><code>    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();</code></p><p><code>76</code><code>  }</code></p><p><code>77</code><code>  function _arrayWithHoles(arr) {</code></p><p><code>78</code><code>    if (Array.isArray(arr)) return arr;</code></p><p><code>79</code><code>  }</code></p><p><code>80</code><code>  function _iterableToArrayLimit(arr, i) {</code></p><p><code>81</code><code>    var _i = arr == null ? null : typeof Symbol !== "undefined" &amp;&amp; arr[Symbol.iterator] || arr["@@iterator"];</code></p><p><code>82</code><code>    if (_i == null) return;</code></p><p><code>83</code><code>    var _arr = [];</code></p><p><code>84</code><code>    var _n = true;</code></p><p><code>85</code><code>    var _d = false;</code></p><p><code>86</code><code>    var _s, _e;</code></p><p><code>87</code><code>    try {</code></p><p><code>88</code><code>      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {</code></p><p><code>89</code><code>        _arr.push(_s.value);</code></p><p><code>90</code><code>        if (i &amp;&amp; _arr.length === i) break;</code></p><p><code>91</code><code>      }</code></p><p><code>92</code><code>    } catch (err) {</code></p><p><code>93</code><code>      _d = true;</code></p><p><code>94</code><code>      _e = err;</code></p><p><code>95</code><code>    } finally {</code></p><p><code>96</code><code>      try {</code></p><p><code>97</code><code>        if (!_n &amp;&amp; _i["return"] != null) _i["return"]();</code></p><p><code>98</code><code>      } finally {</code></p><p><code>99</code><code>        if (_d) throw _e;</code></p><p><code>100</code><code>      }</code></p><p><code>101</code><code>    }</code></p><p><code>102</code><code>    return _arr;</code></p><p><code>103</code><code>  }</code></p><p><code>104</code><code>  function _unsupportedIterableToArray(o, minLen) {</code></p><p><code>105</code><code>    if (!o) return;</code></p><p><code>106</code><code>    if (typeof o === "string") return _arrayLikeToArray(o, minLen);</code></p><p><code>107</code><code>    var n = Object.prototype.toString.call(o).slice(8, -1);</code></p><p><code>108</code><code>    if (n === "Object" &amp;&amp; o.constructor) n = o.constructor.name;</code></p><p><code>109</code><code>    if (n === "Map" || n === "Set") return Array.from(o);</code></p><p><code>110</code><code>    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);</code></p><p><code>111</code><code>  }</code></p><p><code>112</code><code>  function _arrayLikeToArray(arr, len) {</code></p><p><code>113</code><code>    if (len == null || len &gt; arr.length) len = arr.length;</code></p><p><code>114</code><code>    for (var i = 0, arr2 = new Array(len); i &lt; len; i++) arr2[i] = arr[i];</code></p><p><code>115</code><code>    return arr2;</code></p><p><code>116</code><code>  }</code></p><p><code>117</code><code>  function _nonIterableRest() {</code></p><p><code>118</code><code>    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");</code></p><p><code>119</code><code>  }</code></p><p><code>120</code><code>          </code></p><p><code>121</code><code>  var getFrameDepth = function getFrameDepth(win) {</code></p><p><code>122</code><code>    win = win || window;</code></p><p><code>123</code><code>    if (win === win.top) {</code></p><p><code>124</code><code>      return 0;</code></p><p><code>125</code><code>    }</code></p><p><code>126</code><code>    return 1 + getFrameDepth(win.parent);</code></p><p><code>127</code><code>  };</code></p><p><code>128</code><code>  var getTopAncestorOrigin = function getTopAncestorOrigin(win) {</code></p><p><code>129</code><code>    win = win || window;</code></p><p><code>130</code><code>    var ancestorOrigins = win.location &amp;&amp; win.location.ancestorOrigins;</code></p><p><code>131</code><code>    if (win &amp;&amp; ancestorOrigins &amp;&amp; ancestorOrigins.length &gt; 1) {</code></p><p><code>132</code><code>      if (Array.isArray(ancestorOrigins)) {</code></p><p><code>133</code><code>        return ancestorOrigins.pop();</code></p><p><code>134</code><code>      }</code></p><p><code>135</code><code>      return ancestorOrigins.item(ancestorOrigins.length - 1);</code></p><p><code>136</code><code>    }</code></p><p><code>137</code><code>    return null;</code></p><p><code>138</code><code>  };</code></p><p><code>139</code><code>  var getCanonicalUrl = function getCanonicalUrl(win) {</code></p><p><code>140</code><code>    win = win || window;</code></p><p><code>141</code><code>    var canonicalUrlLink = win.document.querySelector('link[rel=canonical]');</code></p><p><code>142</code><code>    return canonicalUrlLink ? canonicalUrlLink.href : null;</code></p><p><code>143</code><code>  };</code></p><p><code>144</code><code>  var findBestUrl = function findBestUrl(frameDepth, win) {</code></p><p><code>145</code><code>    win = win || window;</code></p><p><code>146</code><code>    var doc = win.document;</code></p><p><code>147</code><code>    if (typeof frameDepth !== 'number' || frameDepth &lt; 0) {</code></p><p><code>148</code><code>      frameDepth = getFrameDepth(win);</code></p><p><code>149</code><code>    }</code></p><p><code>150</code><code>    if (frameDepth === 0) {</code></p><p><code>151</code><code>      return getCanonicalUrl(win) || doc.location.href;</code></p><p><code>152</code><code>    } else if (frameDepth === 1) {</code></p><p><code>153</code><code>      try {</code></p><p><code>154</code><code>        var parentHref = win.parent.document.location.href;</code></p><p><code>155</code><code>        if (parentHref) {</code></p><p><code>156</code><code>          return parentHref;</code></p><p><code>157</code><code>        }</code></p><p><code>158</code><code>      } catch (ex) {</code></p><p><code>159</code><code>        var referrer = doc.referrer;</code></p><p><code>160</code><code>        if (referrer) {</code></p><p><code>161</code><code>          return referrer;</code></p><p><code>162</code><code>        }</code></p><p><code>163</code><code>      }</code></p><p><code>164</code><code>    } else if (frameDepth === 2) {</code></p><p><code>165</code><code>      try {</code></p><p><code>166</code><code>        var parentReferrer = win.parent.document.referrer;</code></p><p><code>167</code><code>        if (parentReferrer) {</code></p><p><code>168</code><code>          return parentReferrer;</code></p><p><code>169</code><code>        }</code></p><p><code>170</code><code>      } catch (ex) {}</code></p><p><code>171</code><code>    }</code></p><p><code>172</code><code>    return getTopAncestorOrigin(win) || '';</code></p><p><code>173</code><code>  };</code></p><p><code>174</code><code>          </code></p><p><code>175</code><code>  function discover() {</code></p><p><code>176</code><code>    var win = arguments.length &gt; 0 &amp;&amp; arguments[0] !== undefined ? arguments[0] : window;</code></p><p><code>177</code><code>    var frameDepth = arguments.length &gt; 1 ? arguments[1] : undefined;</code></p><p><code>178</code><code>    var doc = win.document;</code></p><p><code>179</code><code>    var isPresent = win.dtm_config;</code></p><p><code>180</code><code>    var config1;</code></p><p><code>181</code><code>    if (isPresent) {</code></p><p><code>182</code><code>      config1 = _extends({}, win.dtm_config);</code></p><p><code>183</code><code>      Object.keys(config1).forEach(function (k) {</code></p><p><code>184</code><code>        return (config1[k] == null || config1[k] === '') &amp;&amp; delete config1[k];</code></p><p><code>185</code><code>      });</code></p><p><code>186</code><code>    } else {</code></p><p><code>187</code><code>      config1 = {};</code></p><p><code>188</code><code>    }</code></p><p><code>189</code><code>    config1.data_object_type_code = isPresent ? 1 : 0;</code></p><p><code>190</code><code>    config1.location_search = doc.location.search || '';</code></p><p><code>191</code><code>    config1.canonical_url = findBestUrl(frameDepth, win);</code></p><p><code>192</code><code>    config1.dtmc_ref = doc.referrer || '';</code></p><p><code>193</code><code>    config1.dtmc_loc = doc.location.href || '';</code></p><p><code>194</code><code>    return config1;</code></p><p><code>195</code><code>  }</code></p><p><code>196</code><code>          </code></p><p><code>197</code><code>  var getValueFromQueryString = function getValueFromQueryString(key, search) {</code></p><p><code>198</code><code>    if (!search) {</code></p><p><code>199</code><code>      return '';</code></p><p><code>200</code><code>    }</code></p><p><code>201</code><code>    var querystring = search.substring(1);</code></p><p><code>202</code><code>    var items = querystring.split('&amp;');</code></p><p><code>203</code><code>    var filtered = items.map(function (item) {</code></p><p><code>204</code><code>      var itemList = item.split('=');</code></p><p><code>205</code><code>      return {</code></p><p><code>206</code><code>        key: itemList[0],</code></p><p><code>207</code><code>        value: itemList[1]</code></p><p><code>208</code><code>      };</code></p><p><code>209</code><code>    }).filter(function (kvp) {</code></p><p><code>210</code><code>      return kvp.key.toLowerCase() === key.toLowerCase();</code></p><p><code>211</code><code>    });</code></p><p><code>212</code><code>    if (filtered.length) {</code></p><p><code>213</code><code>      return filtered[0].value;</code></p><p><code>214</code><code>    }</code></p><p><code>215</code><code>    return '';</code></p><p><code>216</code><code>  };</code></p><p><code>217</code><code>  var serializeDataToQuery = function serializeDataToQuery(dataObject) {</code></p><p><code>218</code><code>    var parts = [],</code></p><p><code>219</code><code>      key,</code></p><p><code>220</code><code>      value;</code></p><p><code>221</code><code>    for (key in dataObject) {</code></p><p><code>222</code><code>      if (dataObject.hasOwnProperty(key)) {</code></p><p><code>223</code><code>        value = dataObject[key] + '' || '';</code></p><p><code>224</code><code>        parts.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));</code></p><p><code>225</code><code>      }</code></p><p><code>226</code><code>    }</code></p><p><code>227</code><code>    return parts.join('&amp;');</code></p><p><code>228</code><code>  };</code></p><p><code>229</code><code>  var buildUrlForPlugin = function buildUrlForPlugin(pluginName, hostName, path, dtmConfig, integration) {</code></p><p><code>230</code><code>    var plugin = integration.plugins[pluginName];</code></p><p><code>231</code><code>    if (!plugin) {</code></p><p><code>232</code><code>      console.error('Missing plugin name');</code></p><p><code>233</code><code>      return null;</code></p><p><code>234</code><code>    }</code></p><p><code>235</code><code>    var queryStringObj = {};</code></p><p><code>236</code><code>    var fieldMasks = integration.fieldMasks.concat(plugin.fieldMasks);</code></p><p><code>237</code><code>    _extends(queryStringObj, dtmConfig);</code></p><p><code>238</code><code>    fieldMasks.forEach(function (fieldMask) {</code></p><p><code>239</code><code>      delete queryStringObj[fieldMask];</code></p><p><code>240</code><code>    });</code></p><p><code>241</code><code>    var env = integration.env;</code></p><p><code>242</code><code>    var pluginUrl = "".concat(env.tagProto, "://").concat(hostName).concat(path);</code></p><p><code>243</code><code>    queryStringObj.dtm_cookies_enabled = navigator.cookieEnabled;</code></p><p><code>244</code><code>    if (dtmConfig.wl_override) {</code></p><p><code>245</code><code>      queryStringObj.wl_override = '';</code></p><p><code>246</code><code>    } else if (dtmConfig.dtm_wl_override) {</code></p><p><code>247</code><code>      queryStringObj.dtm_wl_override = '';</code></p><p><code>248</code><code>    }</code></p><p><code>249</code><code>    var queryStrings = serializeDataToQuery(queryStringObj);</code></p><p><code>250</code><code>    return "".concat(pluginUrl).concat(queryStrings.length ? '?' : '').concat(queryStrings);</code></p><p><code>251</code><code>  };</code></p><p><code>252</code><code>          </code></p><p><code>253</code><code>  var applyStaticParameters = function applyStaticParameters(dtmConfig, overrideParams) {</code></p><p><code>254</code><code>    _extends(dtmConfig, overrideParams);</code></p><p><code>255</code><code>  };</code></p><p><code>256</code><code>  var resolve = function resolve(path, obj, separator) {</code></p><p><code>257</code><code>    obj = obj || self;</code></p><p><code>258</code><code>    separator = separator || '.';</code></p><p><code>259</code><code>    var properties = Array.isArray(path) ? path : path.split(separator);</code></p><p><code>260</code><code>    var value = properties.reduce(function (prev, curr) {</code></p><p><code>261</code><code>      return prev &amp;&amp; prev[curr];</code></p><p><code>262</code><code>    }, obj);</code></p><p><code>263</code><code>    if (value === null || value === undefined) {</code></p><p><code>264</code><code>      return '';</code></p><p><code>265</code><code>    }</code></p><p><code>266</code><code>    return value;</code></p><p><code>267</code><code>  };</code></p><p><code>268</code><code>  var resolveForType = function resolveForType(mapping, dtmConfig) {</code></p><p><code>269</code><code>    if (mapping.type.toUpperCase() === 'QUERYSTRING') {</code></p><p><code>270</code><code>      var keys = mapping.source.split('.');</code></p><p><code>271</code><code>      if (keys.length === 2) {</code></p><p><code>272</code><code>        var sourceName = keys[0];</code></p><p><code>273</code><code>        return resolve(sourceName, dtmConfig);</code></p><p><code>274</code><code>      }</code></p><p><code>275</code><code>      return '';</code></p><p><code>276</code><code>    } else if (mapping.type.toUpperCase() === 'URLENCODE') {</code></p><p><code>277</code><code>      return resolve(mapping.source, dtmConfig);</code></p><p><code>278</code><code>    } else if (mapping.type.toUpperCase() === 'JSONURLENCODE') {</code></p><p><code>279</code><code>      return resolve(mapping.source, dtmConfig);</code></p><p><code>280</code><code>    }</code></p><p><code>281</code><code>    return resolve(mapping.source, dtmConfig);</code></p><p><code>282</code><code>  };</code></p><p><code>283</code><code>  var transform = function transform(dtmConfig, mapping) {</code></p><p><code>284</code><code>    var value = resolveForType(mapping, dtmConfig);</code></p><p><code>285</code><code>    if (mapping.type.toUpperCase() === 'QUERYSTRING') {</code></p><p><code>286</code><code>      var keys = mapping.source.split('.');</code></p><p><code>287</code><code>      if (keys.length === 2) {</code></p><p><code>288</code><code>        var queryStringName = keys[1];</code></p><p><code>289</code><code>        var qsValue = getValueFromQueryString(queryStringName, value);</code></p><p><code>290</code><code>        if (qsValue !== '') {</code></p><p><code>291</code><code>          dtmConfig[mapping.destination] = qsValue;</code></p><p><code>292</code><code>        }</code></p><p><code>293</code><code>      }</code></p><p><code>294</code><code>    } else if (mapping.type.toUpperCase() === 'URLENCODE') {</code></p><p><code>295</code><code>      var encodedValue = encodeURIComponent(value);</code></p><p><code>296</code><code>      if (encodedValue !== '') {</code></p><p><code>297</code><code>        dtmConfig[mapping.destination] = encodedValue;</code></p><p><code>298</code><code>      }</code></p><p><code>299</code><code>    } else if (mapping.type.toUpperCase() === 'JSONURLENCODE') {</code></p><p><code>300</code><code>      var json = JSON.stringify(value);</code></p><p><code>301</code><code>      var encodedJson = encodeURIComponent(json);</code></p><p><code>302</code><code>      if (encodedJson !== '') {</code></p><p><code>303</code><code>        dtmConfig[mapping.destination] = encodedJson;</code></p><p><code>304</code><code>      }</code></p><p><code>305</code><code>    } else {</code></p><p><code>306</code><code>      if (value !== '') {</code></p><p><code>307</code><code>        dtmConfig[mapping.destination] = value;</code></p><p><code>308</code><code>      }</code></p><p><code>309</code><code>    }</code></p><p><code>310</code><code>  };</code></p><p><code>311</code><code>  var applyMappings = function applyMappings(dtmConfig, mappings) {</code></p><p><code>312</code><code>    mappings.forEach(function (m) {</code></p><p><code>313</code><code>      return transform(dtmConfig, m);</code></p><p><code>314</code><code>    });</code></p><p><code>315</code><code>  };</code></p><p><code>316</code><code>          </code></p><p><code>317</code><code>  function assign (target) {</code></p><p><code>318</code><code>    for (var i = 1; i &lt; arguments.length; i++) {</code></p><p><code>319</code><code>      var source = arguments[i];</code></p><p><code>320</code><code>      for (var key in source) {</code></p><p><code>321</code><code>        target[key] = source[key];</code></p><p><code>322</code><code>      }</code></p><p><code>323</code><code>    }</code></p><p><code>324</code><code>    return target</code></p><p><code>325</code><code>  }</code></p><p><code>326</code><code>  var defaultConverter = {</code></p><p><code>327</code><code>    read: function (value) {</code></p><p><code>328</code><code>      if (value[0] === '"') {</code></p><p><code>329</code><code>        value = value.slice(1, -1);</code></p><p><code>330</code><code>      }</code></p><p><code>331</code><code>      return value.replace(/(%[\dA-F]{2})+/gi, decodeURIComponent)</code></p><p><code>332</code><code>    },</code></p><p><code>333</code><code>    write: function (value) {</code></p><p><code>334</code><code>      return encodeURIComponent(value).replace(</code></p><p><code>335</code><code>        /%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,</code></p><p><code>336</code><code>        decodeURIComponent</code></p><p><code>337</code><code>      )</code></p><p><code>338</code><code>    }</code></p><p><code>339</code><code>  };</code></p><p><code>340</code><code>  function init (converter, defaultAttributes) {</code></p><p><code>341</code><code>    function set (key, value, attributes) {</code></p><p><code>342</code><code>      if (typeof document === 'undefined') {</code></p><p><code>343</code><code>        return</code></p><p><code>344</code><code>      }</code></p><p><code>345</code><code>      attributes = assign({}, defaultAttributes, attributes);</code></p><p><code>346</code><code>      if (typeof attributes.expires === 'number') {</code></p><p><code>347</code><code>        attributes.expires = new Date(Date.now() + attributes.expires * 864e5);</code></p><p><code>348</code><code>      }</code></p><p><code>349</code><code>      if (attributes.expires) {</code></p><p><code>350</code><code>        attributes.expires = attributes.expires.toUTCString();</code></p><p><code>351</code><code>      }</code></p><p><code>352</code><code>      key = encodeURIComponent(key)</code></p><p><code>353</code><code>        .replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent)</code></p><p><code>354</code><code>        .replace(/[()]/g, escape);</code></p><p><code>355</code><code>      var stringifiedAttributes = '';</code></p><p><code>356</code><code>      for (var attributeName in attributes) {</code></p><p><code>357</code><code>        if (!attributes[attributeName]) {</code></p><p><code>358</code><code>          continue</code></p><p><code>359</code><code>        }</code></p><p><code>360</code><code>        stringifiedAttributes += '; ' + attributeName;</code></p><p><code>361</code><code>        if (attributes[attributeName] === true) {</code></p><p><code>362</code><code>          continue</code></p><p><code>363</code><code>        }</code></p><p><code>364</code><code>        stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];</code></p><p><code>365</code><code>      }</code></p><p><code>366</code><code>      return (document.cookie =</code></p><p><code>367</code><code>        key + '=' + converter.write(value, key) + stringifiedAttributes)</code></p><p><code>368</code><code>    }</code></p><p><code>369</code><code>    function get (key) {</code></p><p><code>370</code><code>      if (typeof document === 'undefined' || (arguments.length &amp;&amp; !key)) {</code></p><p><code>371</code><code>        return</code></p><p><code>372</code><code>      }</code></p><p><code>373</code><code>      var cookies = document.cookie ? document.cookie.split('; ') : [];</code></p><p><code>374</code><code>      var jar = {};</code></p><p><code>375</code><code>      for (var i = 0; i &lt; cookies.length; i++) {</code></p><p><code>376</code><code>        var parts = cookies[i].split('=');</code></p><p><code>377</code><code>        var value = parts.slice(1).join('=');</code></p><p><code>378</code><code>        try {</code></p><p><code>379</code><code>          var foundKey = decodeURIComponent(parts[0]);</code></p><p><code>380</code><code>          jar[foundKey] = converter.read(value, foundKey);</code></p><p><code>381</code><code>          if (key === foundKey) {</code></p><p><code>382</code><code>            break</code></p><p><code>383</code><code>          }</code></p><p><code>384</code><code>        } catch (e) {}</code></p><p><code>385</code><code>      }</code></p><p><code>386</code><code>      return key ? jar[key] : jar</code></p><p><code>387</code><code>    }</code></p><p><code>388</code><code>    return Object.create(</code></p><p><code>389</code><code>      {</code></p><p><code>390</code><code>        set: set,</code></p><p><code>391</code><code>        get: get,</code></p><p><code>392</code><code>        remove: function (key, attributes) {</code></p><p><code>393</code><code>          set(</code></p><p><code>394</code><code>            key,</code></p><p><code>395</code><code>            '',</code></p><p><code>396</code><code>            assign({}, attributes, {</code></p><p><code>397</code><code>              expires: -1</code></p><p><code>398</code><code>            })</code></p><p><code>399</code><code>          );</code></p><p><code>400</code><code>        },</code></p><p><code>401</code><code>        withAttributes: function (attributes) {</code></p><p><code>402</code><code>          return init(this.converter, assign({}, this.attributes, attributes))</code></p><p><code>403</code><code>        },</code></p><p><code>404</code><code>        withConverter: function (converter) {</code></p><p><code>405</code><code>          return init(assign({}, this.converter, converter), this.attributes)</code></p><p><code>406</code><code>        }</code></p><p><code>407</code><code>      },</code></p><p><code>408</code><code>      {</code></p><p><code>409</code><code>        attributes: { value: Object.freeze(defaultAttributes) },</code></p><p><code>410</code><code>        converter: { value: Object.freeze(converter) }</code></p><p><code>411</code><code>      }</code></p><p><code>412</code><code>    )</code></p><p><code>413</code><code>  }</code></p><p><code>414</code><code>  var api = init(defaultConverter, { path: '/' });</code></p><p><code>415</code><code>          </code></p><p><code>416</code><code>  var getCookie = function getCookie(name) {</code></p><p><code>417</code><code>    try {</code></p><p><code>418</code><code>      return api.get(name) || null;</code></p><p><code>419</code><code>    } catch (e) {</code></p><p><code>420</code><code>      return null;</code></p><p><code>421</code><code>    }</code></p><p><code>422</code><code>  };</code></p><p><code>423</code><code>  var setCookie = function setCookie(name, value, age, domain, sameSite) {</code></p><p><code>424</code><code>    age = age || 5 * 395;</code></p><p><code>425</code><code>    sameSite = sameSite || 'lax';</code></p><p><code>426</code><code>    var cookieValue;</code></p><p><code>427</code><code>    var cookieConfig = {</code></p><p><code>428</code><code>      'expires': age,</code></p><p><code>429</code><code>      'sameSite': sameSite,</code></p><p><code>430</code><code>      secure: true,</code></p><p><code>431</code><code>      'path': '/'</code></p><p><code>432</code><code>    };</code></p><p><code>433</code><code>    if (domain) {</code></p><p><code>434</code><code>      cookieConfig.domain = domain;</code></p><p><code>435</code><code>    } else {</code></p><p><code>436</code><code>      return;</code></p><p><code>437</code><code>    }</code></p><p><code>438</code><code>    cookieValue = api.set(name, value, cookieConfig);</code></p><p><code>439</code><code>    return cookieValue;</code></p><p><code>440</code><code>  };</code></p><p><code>441</code><code>          </code></p><p><code>442</code><code>  var EXP_SUFFIX = '_exp';</code></p><p><code>443</code><code>  function removeStorageItem(key, type) {</code></p><p><code>444</code><code>    type = type || 'localStorage';</code></p><p><code>445</code><code>    try {</code></p><p><code>446</code><code>      var storage = window[type];</code></p><p><code>447</code><code>      storage.removeItem(key + EXP_SUFFIX);</code></p><p><code>448</code><code>      storage.removeItem(key);</code></p><p><code>449</code><code>      return true;</code></p><p><code>450</code><code>    } catch (e) {</code></p><p><code>451</code><code>      console.debug(e);</code></p><p><code>452</code><code>      return false;</code></p><p><code>453</code><code>    }</code></p><p><code>454</code><code>  }</code></p><p><code>455</code><code>  function getStorageItem(key, type) {</code></p><p><code>456</code><code>    type = type || 'localStorage';</code></p><p><code>457</code><code>    var val = null;</code></p><p><code>458</code><code>    try {</code></p><p><code>459</code><code>      var storage = window[type];</code></p><p><code>460</code><code>      var expVal = storage.getItem(key + EXP_SUFFIX);</code></p><p><code>461</code><code>      if (!expVal) {</code></p><p><code>462</code><code>        val = storage.getItem(key);</code></p><p><code>463</code><code>      } else {</code></p><p><code>464</code><code>        var expDate = new Date(expVal);</code></p><p><code>465</code><code>        var isValid = expDate.getTime() - Date.now() &gt; 0;</code></p><p><code>466</code><code>        if (isValid) {</code></p><p><code>467</code><code>          val = storage.getItem(key);</code></p><p><code>468</code><code>        } else {</code></p><p><code>469</code><code>          removeStorageItem(key);</code></p><p><code>470</code><code>        }</code></p><p><code>471</code><code>      }</code></p><p><code>472</code><code>    } catch (e) {</code></p><p><code>473</code><code>      console.debug(e);</code></p><p><code>474</code><code>    }</code></p><p><code>475</code><code>    return val;</code></p><p><code>476</code><code>  }</code></p><p><code>477</code><code>  function setStorageItem(key, val, expires, type) {</code></p><p><code>478</code><code>    type = type || 'localStorage';</code></p><p><code>479</code><code>    try {</code></p><p><code>480</code><code>      var storage = window[type];</code></p><p><code>481</code><code>      if (expires !== undefined) {</code></p><p><code>482</code><code>        var expStr = new Date(Date.now() + expires * 60 * 1000).toUTCString();</code></p><p><code>483</code><code>        storage.setItem(key + EXP_SUFFIX, expStr);</code></p><p><code>484</code><code>      }</code></p><p><code>485</code><code>      storage.setItem(key, val);</code></p><p><code>486</code><code>    } catch (e) {</code></p><p><code>487</code><code>      console.debug(e);</code></p><p><code>488</code><code>      return false;</code></p><p><code>489</code><code>    }</code></p><p><code>490</code><code>    return true;</code></p><p><code>491</code><code>  }</code></p><p><code>492</code><code>          </code></p><p><code>493</code><code>  var minutesPerDay = 24 * 60;</code></p><p><code>494</code><code>          </code></p><p><code>495</code><code>  var preferPersitedValueForThese = ['dtm_token', 'dtm_token_sc'];</code></p><p><code>496</code><code>  var isValidValue = function isValidValue(val) {</code></p><p><code>497</code><code>    return val !== 'undefined' &amp;&amp; val !== undefined &amp;&amp; val !== null &amp;&amp; val !== '';</code></p><p><code>498</code><code>  };</code></p><p><code>499</code><code>  function getValue(key, mode) {</code></p><p><code>500</code><code>    var serverSetCookie = getCookie("".concat(key, "_sc")) || '';</code></p><p><code>501</code><code>    var localStorage = getStorageItem(key, 'localStorage') || '';</code></p><p><code>502</code><code>    var sessionStorage = getStorageItem(key, 'sessionStorage') || '';</code></p><p><code>503</code><code>    var documentCookie = getCookie(key) || '';</code></p><p><code>504</code><code>    var getBestValue = function getBestValue() {</code></p><p><code>505</code><code>      if (isValidValue(serverSetCookie)) {</code></p><p><code>506</code><code>        return serverSetCookie;</code></p><p><code>507</code><code>      }</code></p><p><code>508</code><code>      if (isValidValue(localStorage)) {</code></p><p><code>509</code><code>        return localStorage;</code></p><p><code>510</code><code>      }</code></p><p><code>511</code><code>      if (isValidValue(sessionStorage)) {</code></p><p><code>512</code><code>        return sessionStorage;</code></p><p><code>513</code><code>      }</code></p><p><code>514</code><code>      if (isValidValue(documentCookie)) {</code></p><p><code>515</code><code>        return documentCookie;</code></p><p><code>516</code><code>      }</code></p><p><code>517</code><code>      return '';</code></p><p><code>518</code><code>    };</code></p><p><code>519</code><code>    if (mode === 'all') {</code></p><p><code>520</code><code>      return {</code></p><p><code>521</code><code>        serverSetCookie: serverSetCookie,</code></p><p><code>522</code><code>        localStorage: localStorage,</code></p><p><code>523</code><code>        sessionStorage: sessionStorage,</code></p><p><code>524</code><code>        documentCookie: documentCookie</code></p><p><code>525</code><code>      };</code></p><p><code>526</code><code>    }</code></p><p><code>527</code><code>    return getBestValue();</code></p><p><code>528</code><code>  }</code></p><p><code>529</code><code>  function getValues(target, integration) {</code></p><p><code>530</code><code>    if (integration.persistence) {</code></p><p><code>531</code><code>      integration.persistence.forEach(function (entry) {</code></p><p><code>532</code><code>        var oldValue = getValue(entry.key, 'best');</code></p><p><code>533</code><code>        if (isValidValue(oldValue) &amp;&amp; preferPersitedValueForThese.includes(entry.key)) {</code></p><p><code>534</code><code>          target[entry.key] = oldValue;</code></p><p><code>535</code><code>        } else {</code></p><p><code>536</code><code>          var newValue = target[entry.key];</code></p><p><code>537</code><code>          if (!isValidValue(newValue)) {</code></p><p><code>538</code><code>            if (isValidValue(oldValue)) {</code></p><p><code>539</code><code>              target[entry.key] = oldValue;</code></p><p><code>540</code><code>            } else if (isValidValue(entry.value)) {</code></p><p><code>541</code><code>              target[entry.key] = entry.value;</code></p><p><code>542</code><code>            }</code></p><p><code>543</code><code>          }</code></p><p><code>544</code><code>        }</code></p><p><code>545</code><code>      });</code></p><p><code>546</code><code>    }</code></p><p><code>547</code><code>  }</code></p><p><code>548</code><code>  function setValue(key, value, ageInDays, environment) {</code></p><p><code>549</code><code>    setStorageItem(key, value, ageInDays * minutesPerDay, 'localStorage');</code></p><p><code>550</code><code>    setStorageItem(key, value, ageInDays * minutesPerDay, 'sessionStorage');</code></p><p><code>551</code><code>    setCookie(key, value, ageInDays, environment.cookieDomain);</code></p><p><code>552</code><code>  }</code></p><p><code>553</code><code>  function setValues(target, integration) {</code></p><p><code>554</code><code>    var setPersistenceValue = function setPersistenceValue(integrationVal) {</code></p><p><code>555</code><code>      if (target[integrationVal.key]) {</code></p><p><code>556</code><code>        setValue(integrationVal.key, target[integrationVal.key], integrationVal.expires, integration.env);</code></p><p><code>557</code><code>      }</code></p><p><code>558</code><code>    };</code></p><p><code>559</code><code>    if (integration.persistence) {</code></p><p><code>560</code><code>      integration.persistence.forEach(setPersistenceValue);</code></p><p><code>561</code><code>    }</code></p><p><code>562</code><code>  }</code></p><p><code>563</code><code>          </code></p><p><code>564</code><code>  var createScript = function createScript(url, nonceValue, onLoadHandler, onErrorHandler) {</code></p><p><code>565</code><code>    var script = document.createElement('script');</code></p><p><code>566</code><code>    script.src = url;</code></p><p><code>567</code><code>    script.nonce = nonceValue;</code></p><p><code>568</code><code>    script.onload = onLoadHandler;</code></p><p><code>569</code><code>    script.onerror = onErrorHandler;</code></p><p><code>570</code><code>    return script;</code></p><p><code>571</code><code>  };</code></p><p><code>572</code><code>  var firePixel = function firePixel(url, onLoadHandler, onErrorHandler, referrerPolicy) {</code></p><p><code>573</code><code>    var img = new Image(1, 1);</code></p><p><code>574</code><code>    img.className = 'cnvr-pixel';</code></p><p><code>575</code><code>    img.style.cssText = 'display:none';</code></p><p><code>576</code><code>    if (typeof onLoadHandler === 'function') {</code></p><p><code>577</code><code>      img.onload = onLoadHandler;</code></p><p><code>578</code><code>    }</code></p><p><code>579</code><code>    if (typeof onErrorHandler === 'function') {</code></p><p><code>580</code><code>      img.onerror = onErrorHandler;</code></p><p><code>581</code><code>    }</code></p><p><code>582</code><code>    if (referrerPolicy) {</code></p><p><code>583</code><code>      img.setAttribute('referrerPolicy', referrerPolicy);</code></p><p><code>584</code><code>      img.referrerPolicy = referrerPolicy;</code></p><p><code>585</code><code>    }</code></p><p><code>586</code><code>    img.src = url;</code></p><p><code>587</code><code>    img.alt = '';</code></p><p><code>588</code><code>    return img;</code></p><p><code>589</code><code>  };</code></p><p><code>590</code><code>  var firePixels = function firePixels(urls, referrerPolicy) {</code></p><p><code>591</code><code>    var pixelArr = [];</code></p><p><code>592</code><code>    urls.forEach(function (url) {</code></p><p><code>593</code><code>      pixelArr.push(firePixel(url, null, null, referrerPolicy));</code></p><p><code>594</code><code>    });</code></p><p><code>595</code><code>    return pixelArr;</code></p><p><code>596</code><code>  };</code></p><p><code>597</code><code>          </code></p><p><code>598</code><code>  var createPluginScript = function createPluginScript(dtmConfig, integration) {</code></p><p><code>599</code><code>    var env = integration.env;</code></p><p><code>600</code><code>    var url = buildUrlForPlugin('cnvr', env.tagHost, env.tagPath, dtmConfig, integration);</code></p><p><code>601</code><code>    return createScript(url, dtmConfig.nonce);</code></p><p><code>602</code><code>  };</code></p><p><code>603</code><code>  var generateAndFireFpcPixel = function generateAndFireFpcPixel(dtmConfig, integration) {</code></p><p><code>604</code><code>    var env = integration.env;</code></p><p><code>605</code><code>    if (!env.fpcTagWrite || !navigator.cookieEnabled) {</code></p><p><code>606</code><code>      return '';</code></p><p><code>607</code><code>    }</code></p><p><code>608</code><code>    var wlDomainsKey = '';</code></p><p><code>609</code><code>    if (dtmConfig.wl_domains_key) {</code></p><p><code>610</code><code>      wlDomainsKey = dtmConfig.wl_domains_key;</code></p><p><code>611</code><code>    }</code></p><p><code>612</code><code>    var wlOverrideDomain = '';</code></p><p><code>613</code><code>    if (dtmConfig.wl_override || dtmConfig.dtm_wl_override) {</code></p><p><code>614</code><code>      if (dtmConfig.wl_override) {</code></p><p><code>615</code><code>        wlOverrideDomain = dtmConfig.wl_override;</code></p><p><code>616</code><code>      } else {</code></p><p><code>617</code><code>        wlOverrideDomain = dtmConfig.dtm_wl_override;</code></p><p><code>618</code><code>      }</code></p><p><code>619</code><code>    }</code></p><p><code>620</code><code>    var baseUrl = "".concat(env.cookieProto, "://").concat(env.cookieHost).concat(env.cookiePath, "?dtm_cid=").concat(dtmConfig.dtm_cid, "&amp;dtm_cmagic=").concat(dtmConfig.dtm_cmagic, "&amp;ver=2&amp;dtm_form_uid=").concat(dtmConfig.dtm_form_uid, "&amp;wl_domains_key=").concat(wlDomainsKey, "&amp;wl_override=").concat(wlOverrideDomain);</code></p><p><code>621</code><code>    var serverPersistValues = Array.isArray(integration.persistence) ? integration.persistence.filter(function (entry) {</code></p><p><code>622</code><code>      return entry.context === 'server';</code></p><p><code>623</code><code>    }) : [];</code></p><p><code>624</code><code>    var queryParamList = [];</code></p><p><code>625</code><code>    serverPersistValues.forEach(function (entry) {</code></p><p><code>626</code><code>      var key = entry.key;</code></p><p><code>627</code><code>      var value = dtmConfig[key];</code></p><p><code>628</code><code>      if (typeof value !== 'undefined') {</code></p><p><code>629</code><code>        queryParamList.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));</code></p><p><code>630</code><code>      }</code></p><p><code>631</code><code>    });</code></p><p><code>632</code><code>    var pixelUrl = queryParamList.length &gt; 0 ? "".concat(baseUrl, "&amp;").concat(queryParamList.join('&amp;')) : '';</code></p><p><code>633</code><code>    firePixel(pixelUrl);</code></p><p><code>634</code><code>    return pixelUrl;</code></p><p><code>635</code><code>  };</code></p><p><code>636</code><code>  var disco = function disco(dtmConfig, integration) {</code></p><p><code>637</code><code>    var pluginScript = createPluginScript(dtmConfig, integration);</code></p><p><code>638</code><code>    document.head.appendChild(pluginScript);</code></p><p><code>639</code><code>    generateAndFireFpcPixel(dtmConfig, integration);</code></p><p><code>640</code><code>  };</code></p><p><code>641</code><code>  var final = function final(dtmConfig, integration) {</code></p><p><code>642</code><code>    var referrerLimitedPixels = integration.referrerLimitedPixels;</code></p><p><code>643</code><code>    var nonReferrerLimitedPixels = integration.pixels;</code></p><p><code>644</code><code>    if (Array.isArray(referrerLimitedPixels) &amp;&amp; referrerLimitedPixels.length &gt; 0) {</code></p><p><code>645</code><code>      firePixels(integration.referrerLimitedPixels, 'same-origin');</code></p><p><code>646</code><code>    }</code></p><p><code>647</code><code>    if (Array.isArray(nonReferrerLimitedPixels) &amp;&amp; nonReferrerLimitedPixels.length &gt; 0) {</code></p><p><code>648</code><code>      firePixels(integration.pixels);</code></p><p><code>649</code><code>    }</code></p><p><code>650</code><code>  };</code></p><p><code>651</code><code>  var cnvrPlugin = {</code></p><p><code>652</code><code>    disco: disco,</code></p><p><code>653</code><code>    final: final</code></p><p><code>654</code><code>  };</code></p><p><code>655</code><code>          </code></p><p><code>656</code><code>  var Log = /*#__PURE__*/function () {</code></p><p><code>657</code><code>    function Log() {</code></p><p><code>658</code><code>      _classCallCheck(this, Log);</code></p><p><code>659</code><code>      this.levels = {</code></p><p><code>660</code><code>        'trace': 0,</code></p><p><code>661</code><code>        'debug': 1,</code></p><p><code>662</code><code>        'info': 2,</code></p><p><code>663</code><code>        'warn': 3,</code></p><p><code>664</code><code>        'error': 4</code></p><p><code>665</code><code>      };</code></p><p><code>666</code><code>      this.level = this.levels['info'];</code></p><p><code>667</code><code>    }</code></p><p><code>668</code><code>    _createClass(Log, [{</code></p><p><code>669</code><code>      key: "level",</code></p><p><code>670</code><code>      value: function level(levelString) {</code></p><p><code>671</code><code>        this.level = this.levels[levelString];</code></p><p><code>672</code><code>      }</code></p><p><code>673</code><code>    }, {</code></p><p><code>674</code><code>      key: "log",</code></p><p><code>675</code><code>      value: function log(levelString) {</code></p><p><code>676</code><code>        if (this.levels[levelString] &lt;= this.level) {</code></p><p><code>677</code><code>          var _console;</code></p><p><code>678</code><code>          for (var _len = arguments.length, args = new Array(_len &gt; 1 ? _len - 1 : 0), _key = 1; _key &lt; _len; _key++) {</code></p><p><code>679</code><code>            args[_key - 1] = arguments[_key];</code></p><p><code>680</code><code>          }</code></p><p><code>681</code><code>          (_console = console).log.apply(_console, ["[".concat(levelString, " - ").concat(new Date().toLocaleString(), "]")].concat(args));</code></p><p><code>682</code><code>        }</code></p><p><code>683</code><code>      }</code></p><p><code>684</code><code>    }, {</code></p><p><code>685</code><code>      key: "trace",</code></p><p><code>686</code><code>      value: function trace() {</code></p><p><code>687</code><code>        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 &lt; _len2; _key2++) {</code></p><p><code>688</code><code>          args[_key2] = arguments[_key2];</code></p><p><code>689</code><code>        }</code></p><p><code>690</code><code>        this.log('trace', args);</code></p><p><code>691</code><code>      }</code></p><p><code>692</code><code>    }, {</code></p><p><code>693</code><code>      key: "debug",</code></p><p><code>694</code><code>      value: function debug() {</code></p><p><code>695</code><code>        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 &lt; _len3; _key3++) {</code></p><p><code>696</code><code>          args[_key3] = arguments[_key3];</code></p><p><code>697</code><code>        }</code></p><p><code>698</code><code>        this.log('debug', args);</code></p><p><code>699</code><code>      }</code></p><p><code>700</code><code>    }, {</code></p><p><code>701</code><code>      key: "info",</code></p><p><code>702</code><code>      value: function info() {</code></p><p><code>703</code><code>        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 &lt; _len4; _key4++) {</code></p><p><code>704</code><code>          args[_key4] = arguments[_key4];</code></p><p><code>705</code><code>        }</code></p><p><code>706</code><code>        this.log('info', args);</code></p><p><code>707</code><code>      }</code></p><p><code>708</code><code>    }, {</code></p><p><code>709</code><code>      key: "warn",</code></p><p><code>710</code><code>      value: function warn() {</code></p><p><code>711</code><code>        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 &lt; _len5; _key5++) {</code></p><p><code>712</code><code>          args[_key5] = arguments[_key5];</code></p><p><code>713</code><code>        }</code></p><p><code>714</code><code>        this.log('warn', args);</code></p><p><code>715</code><code>      }</code></p><p><code>716</code><code>    }, {</code></p><p><code>717</code><code>      key: "error",</code></p><p><code>718</code><code>      value: function error() {</code></p><p><code>719</code><code>        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 &lt; _len6; _key6++) {</code></p><p><code>720</code><code>          args[_key6] = arguments[_key6];</code></p><p><code>721</code><code>        }</code></p><p><code>722</code><code>        this.log('error', args);</code></p><p><code>723</code><code>      }</code></p><p><code>724</code><code>    }, {</code></p><p><code>725</code><code>      key: "dir",</code></p><p><code>726</code><code>      value: function dir() {</code></p><p><code>727</code><code>        for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 &lt; _len7; _key7++) {</code></p><p><code>728</code><code>          args[_key7] = arguments[_key7];</code></p><p><code>729</code><code>        }</code></p><p><code>730</code><code>        console.dir(args);</code></p><p><code>731</code><code>      }</code></p><p><code>732</code><code>    }]);</code></p><p><code>733</code><code>    return Log;</code></p><p><code>734</code><code>  }();</code></p><p><code>735</code><code>  var log = new Log();</code></p><p><code>736</code><code>          </code></p><p><code>737</code><code>  function cjApi() {</code></p><p><code>738</code><code>    var statsData = 0;</code></p><p><code>739</code><code>    var itemNameChangePrefixMap = {</code></p><p><code>740</code><code>      'items.product_id': 'item',</code></p><p><code>741</code><code>      'items.item_amount': 'amt',</code></p><p><code>742</code><code>      'items.item_quantity': 'qty',</code></p><p><code>743</code><code>      'items.item_discount': 'dcnt',</code></p><p><code>744</code><code>      'bypass_channel.name': 'channel',</code></p><p><code>745</code><code>      'bypass_channel.timestamp': 'channel_ts',</code></p><p><code>746</code><code>      'items.': ''</code></p><p><code>747</code><code>    };</code></p><p><code>748</code><code>    var replaceFieldNames = function replaceFieldNames(dataIn, fieldMap) {</code></p><p><code>749</code><code>      var dataOut = {};</code></p><p><code>750</code><code>      _extends(dataOut, dataIn);</code></p><p><code>751</code><code>      if (Object.keys(fieldMap).length === 0 || Object.keys(dataOut).length === 0) {</code></p><p><code>752</code><code>        return dataOut;</code></p><p><code>753</code><code>      }</code></p><p><code>754</code><code>      for (var fieldMapKey in fieldMap) {</code></p><p><code>755</code><code>        if (fieldMap.hasOwnProperty(fieldMapKey)) {</code></p><p><code>756</code><code>          replaceFieldNameCaseInsensitively(fieldMapKey, fieldMap[fieldMapKey], dataOut);</code></p><p><code>757</code><code>        }</code></p><p><code>758</code><code>      }</code></p><p><code>759</code><code>      return dataOut;</code></p><p><code>760</code><code>    };</code></p><p><code>761</code><code>    var replaceFieldNameCaseInsensitively = function replaceFieldNameCaseInsensitively(fieldMapKey, fieldMapValue, dataOut) {</code></p><p><code>762</code><code>      var lowerFieldMapKey = fieldMapKey.toLowerCase();</code></p><p><code>763</code><code>      for (var currentKey in dataOut) {</code></p><p><code>764</code><code>        if (!dataOut.hasOwnProperty(currentKey)) {</code></p><p><code>765</code><code>          continue;</code></p><p><code>766</code><code>        }</code></p><p><code>767</code><code>        var lowerCurrentKey = currentKey.toLowerCase();</code></p><p><code>768</code><code>        if (lowerCurrentKey.startsWith(lowerFieldMapKey)) {</code></p><p><code>769</code><code>          var newKey = lowerCurrentKey.replace(lowerFieldMapKey, fieldMapValue);</code></p><p><code>770</code><code>          dataOut[newKey] = dataOut[currentKey];</code></p><p><code>771</code><code>          delete dataOut[currentKey];</code></p><p><code>772</code><code>        }</code></p><p><code>773</code><code>      }</code></p><p><code>774</code><code>    };</code></p><p><code>775</code><code>    var extractCjData = function extractCjData(dtmConfig) {</code></p><p><code>776</code><code>      var eventIdsMap = getEventIdsMap();</code></p><p><code>777</code><code>      var genericFieldsMap = getGenericFieldsMap(dtmConfig);</code></p><p><code>778</code><code>      var statsMap = getStatsMap();</code></p><p><code>779</code><code>      return _objectSpread2(_objectSpread2(_objectSpread2({}, eventIdsMap), genericFieldsMap), statsMap);</code></p><p><code>780</code><code>      function getStatsMap() {</code></p><p><code>781</code><code>        var statsMap = {};</code></p><p><code>782</code><code>        statsMap['custom.stats'] = statsData;</code></p><p><code>783</code><code>        return statsMap;</code></p><p><code>784</code><code>      }</code></p><p><code>785</code><code>      function getEventIdsMap() {</code></p><p><code>786</code><code>        var eventIdsMap = {};</code></p><p><code>787</code><code>        var hasCjEventId = false;</code></p><p><code>788</code><code>        var cjEventId = '';</code></p><p><code>789</code><code>        var values = getValue('CJEventId', 'all');</code></p><p><code>790</code><code>        function maybeAddValueToEventIdsMap(maybeValue, key, statsDataValue) {</code></p><p><code>791</code><code>          if (maybeValue) {</code></p><p><code>792</code><code>            eventIdsMap[key] = maybeValue;</code></p><p><code>793</code><code>            statsData += statsDataValue;</code></p><p><code>794</code><code>            if (!hasCjEventId) {</code></p><p><code>795</code><code>              cjEventId = maybeValue;</code></p><p><code>796</code><code>            }</code></p><p><code>797</code><code>            hasCjEventId = true;</code></p><p><code>798</code><code>          }</code></p><p><code>799</code><code>        }</code></p><p><code>800</code><code>        maybeAddValueToEventIdsMap(values.serverSetCookie, 'cjevent', 0x10000);</code></p><p><code>801</code><code>        maybeAddValueToEventIdsMap(values.documentCookie, 'cjeventc', 0x20000);</code></p><p><code>802</code><code>        maybeAddValueToEventIdsMap(values.localStorage, 'cjeventl', 0x40000);</code></p><p><code>803</code><code>        maybeAddValueToEventIdsMap(values.sessionStorage, 'cjevents', 0x80000);</code></p><p><code>804</code><code>        if (hasCjEventId) {</code></p><p><code>805</code><code>          eventIdsMap['cjevent'] = cjEventId;</code></p><p><code>806</code><code>        }</code></p><p><code>807</code><code>        return eventIdsMap;</code></p><p><code>808</code><code>      }</code></p><p><code>809</code><code>      function getGenericFieldsMap(dataIn, outputMap, namespace) {</code></p><p><code>810</code><code>        outputMap = outputMap || {};</code></p><p><code>811</code><code>        namespace = namespace || '';</code></p><p><code>812</code><code>        if (Object.keys(dataIn).length &gt; 0) {</code></p><p><code>813</code><code>          for (var key in dataIn) {</code></p><p><code>814</code><code>            if (dataIn.hasOwnProperty(key)) {</code></p><p><code>815</code><code>              var value = dataIn[key];</code></p><p><code>816</code><code>              if (defined(value)) {</code></p><p><code>817</code><code>                var newKey = key;</code></p><p><code>818</code><code>                if (namespace !== '') newKey = namespace + '.' + key;</code></p><p><code>819</code><code>                switch (value.constructor.name) {</code></p><p><code>820</code><code>                  case 'Object':</code></p><p><code>821</code><code>                    getGenericFieldsMap(value, outputMap, newKey);</code></p><p><code>822</code><code>                    break;</code></p><p><code>823</code><code>                  case 'Array':</code></p><p><code>824</code><code>                    populateArrayFieldsMap(key, value, outputMap, newKey);</code></p><p><code>825</code><code>                    break;</code></p><p><code>826</code><code>                  default:</code></p><p><code>827</code><code>                    outputMap[newKey] = value;</code></p><p><code>828</code><code>                    break;</code></p><p><code>829</code><code>                }</code></p><p><code>830</code><code>              }</code></p><p><code>831</code><code>            }</code></p><p><code>832</code><code>          }</code></p><p><code>833</code><code>        }</code></p><p><code>834</code><code>        return outputMap;</code></p><p><code>835</code><code>      }</code></p><p><code>836</code><code>      function populateArrayFieldsMap(key, value, outputMap, namespace) {</code></p><p><code>837</code><code>        if (key.toLowerCase() === 'coupons') {</code></p><p><code>838</code><code>          outputMap['coupon'] = getCoupon(value);</code></p><p><code>839</code><code>        } else {</code></p><p><code>840</code><code>          populateItemMap(value, outputMap, namespace);</code></p><p><code>841</code><code>        }</code></p><p><code>842</code><code>      }</code></p><p><code>843</code><code>      function populateItemMap(items, outputMap, namespace) {</code></p><p><code>844</code><code>        if (defined(items)) {</code></p><p><code>845</code><code>          var restrictedParametersToAvoidRaceConditions = Object.values(itemNameChangePrefixMap);</code></p><p><code>846</code><code>          var isParameterNameRestrictedToAvoidRaceConditions = function isParameterNameRestrictedToAvoidRaceConditions(key) {</code></p><p><code>847</code><code>            return restrictedParametersToAvoidRaceConditions.includes(key);</code></p><p><code>848</code><code>          };</code></p><p><code>849</code><code>          for (var i = 0; i &lt; items.length; i++) {</code></p><p><code>850</code><code>            var item = items[i];</code></p><p><code>851</code><code>            if (defined(item)) {</code></p><p><code>852</code><code>              if (Object.keys(item).length &gt; 0) {</code></p><p><code>853</code><code>                for (var key in item) {</code></p><p><code>854</code><code>                  if (item.hasOwnProperty(key)) {</code></p><p><code>855</code><code>                    if (!isParameterNameRestrictedToAvoidRaceConditions(key)) {</code></p><p><code>856</code><code>                      outputMap[namespace + "." + key + (i + 1)] = item[key];</code></p><p><code>857</code><code>                    }</code></p><p><code>858</code><code>                  }</code></p><p><code>859</code><code>                }</code></p><p><code>860</code><code>              }</code></p><p><code>861</code><code>            }</code></p><p><code>862</code><code>          }</code></p><p><code>863</code><code>        }</code></p><p><code>864</code><code>      }</code></p><p><code>865</code><code>      function getCoupon(coupons) {</code></p><p><code>866</code><code>        var couponValue = '';</code></p><p><code>867</code><code>        for (var i = 0; i &lt; coupons.length; i++) {</code></p><p><code>868</code><code>          if (defined(coupons[i].name)) couponValue += coupons[i].name + ',';</code></p><p><code>869</code><code>        }</code></p><p><code>870</code><code>        couponValue = couponValue.substring(0, couponValue.length - 1);</code></p><p><code>871</code><code>        return couponValue;</code></p><p><code>872</code><code>      }</code></p><p><code>873</code><code>    };</code></p><p><code>874</code><code>    var buildCjPixelUrl = function buildCjPixelUrl(serializedQueryString, pluginData) {</code></p><p><code>875</code><code>      var cjHost = pluginData.integrationDomain;</code></p><p><code>876</code><code>      return 'https://' + cjHost + '/u?' + serializedQueryString;</code></p><p><code>877</code><code>    };</code></p><p><code>878</code><code>    function mapCjTypeFromFormIdAndPromoId(dtmConfig, pluginData) {</code></p><p><code>879</code><code>      if (defined(pluginData) &amp;&amp; defined(pluginData.formMap) &amp;&amp; defined(dtmConfig.dtm_fid)) {</code></p><p><code>880</code><code>        var formsObj = pluginData.formMap[dtmConfig.dtm_fid];</code></p><p><code>881</code><code>        if (defined(formsObj) &amp;&amp; defined(formsObj.promoMap)) {</code></p><p><code>882</code><code>          var promoList = formsObj.promoMap;</code></p><p><code>883</code><code>          if (defined(dtmConfig.cli_promo_id) &amp;&amp; dtmConfig.cli_promo_id.toString() != "-1") {</code></p><p><code>884</code><code>            var promos = promoList.filter(function (p) {</code></p><p><code>885</code><code>              return p.promoId === parseInt(dtmConfig.cli_promo_id);</code></p><p><code>886</code><code>            });</code></p><p><code>887</code><code>            if (defined(promos) &amp;&amp; promos.length &gt; 0) {</code></p><p><code>888</code><code>              if (defined(promos[0].actionId)) {</code></p><p><code>889</code><code>                return parseInt(promos[0].actionId);</code></p><p><code>890</code><code>              }</code></p><p><code>891</code><code>            }</code></p><p><code>892</code><code>          } else {</code></p><p><code>893</code><code>            var _promos = promoList.filter(function (p) {</code></p><p><code>894</code><code>              return p.promoId === null;</code></p><p><code>895</code><code>            });</code></p><p><code>896</code><code>            if (defined(_promos) &amp;&amp; _promos.length &gt; 0) {</code></p><p><code>897</code><code>              if (defined(_promos[0].actionId)) {</code></p><p><code>898</code><code>                return parseInt(_promos[0].actionId);</code></p><p><code>899</code><code>              }</code></p><p><code>900</code><code>            }</code></p><p><code>901</code><code>          }</code></p><p><code>902</code><code>        }</code></p><p><code>903</code><code>      }</code></p><p><code>904</code><code>      return undefined;</code></p><p><code>905</code><code>    }</code></p><p><code>906</code><code>    var fireCjPixel = function fireCjPixel(cjPixelUrl) {</code></p><p><code>907</code><code>      var cjPixel = new Image();</code></p><p><code>908</code><code>      cjPixel.src = cjPixelUrl;</code></p><p><code>909</code><code>      log.debug('firing CJ pixel ' + cjPixel.src);</code></p><p><code>910</code><code>      return cjPixel.src;</code></p><p><code>911</code><code>    };</code></p><p><code>912</code><code>    var defined = function defined(x) {</code></p><p><code>913</code><code>      return typeof x !== 'undefined';</code></p><p><code>914</code><code>    };</code></p><p><code>915</code><code>    function disco(dtmConfig, integration) {</code></p><p><code>916</code><code>      var cjPlugin = integration.plugins['cj'];</code></p><p><code>917</code><code>      var cjPluginData = defined(cjPlugin.data) ? cjPlugin.data : {};</code></p><p><code>918</code><code>      dtmConfig.type = mapCjTypeFromFormIdAndPromoId(dtmConfig, cjPluginData);</code></p><p><code>919</code><code>      if (typeof dtmConfig.type === 'undefined' || isNaN(dtmConfig.type)) {</code></p><p><code>920</code><code>        log.debug('not firing CJ pixel because no type mapping found (dtmConfig.dtm_fid=' + dtmConfig.dtm_fid + ' and dtmConfig.cli_promo_id=' + dtmConfig.cli_promo_id + ')');</code></p><p><code>921</code><code>        return;</code></p><p><code>922</code><code>      }</code></p><p><code>923</code><code>      var cjDataMap = extractCjData(dtmConfig);</code></p><p><code>924</code><code>      var cjDataMapWithoutMaskedFields = filterPluginData(cjDataMap, integration, 'cj');</code></p><p><code>925</code><code>      var cjDataMapWithReplacedFieldNames = replaceFieldNames(cjDataMapWithoutMaskedFields, itemNameChangePrefixMap);</code></p><p><code>926</code><code>      var serializedQueryString = serializeDataToQuery(cjDataMapWithReplacedFieldNames);</code></p><p><code>927</code><code>      var cjPixelUrl = buildCjPixelUrl(serializedQueryString, cjPluginData);</code></p><p><code>928</code><code>      return fireCjPixel(cjPixelUrl);</code></p><p><code>929</code><code>    }</code></p><p><code>930</code><code>    function final(dtmConfig, integration) {}</code></p><p><code>931</code><code>    return {</code></p><p><code>932</code><code>      disco: disco,</code></p><p><code>933</code><code>      final: final</code></p><p><code>934</code><code>    };</code></p><p><code>935</code><code>  }</code></p><p><code>936</code><code>  function filterPluginData(dataIn, integration, pluginName) {</code></p><p><code>937</code><code>    var plugin = integration.plugins[pluginName];</code></p><p><code>938</code><code>    if (!plugin) {</code></p><p><code>939</code><code>      return dataIn;</code></p><p><code>940</code><code>    }</code></p><p><code>941</code><code>    var filteredData = {};</code></p><p><code>942</code><code>    var fieldMasks = integration.fieldMasks.concat(plugin.fieldMasks);</code></p><p><code>943</code><code>    _extends(filteredData, dataIn);</code></p><p><code>944</code><code>    fieldMasks.forEach(function (fieldMask) {</code></p><p><code>945</code><code>      delete filteredData[fieldMask];</code></p><p><code>946</code><code>    });</code></p><p><code>947</code><code>    return filteredData;</code></p><p><code>948</code><code>  }</code></p><p><code>949</code><code>          </code></p><p><code>950</code><code>  var plugins = {</code></p><p><code>951</code><code>    cj: cjApi(),</code></p><p><code>952</code><code>    cnvr: cnvrPlugin</code></p><p><code>953</code><code>  };</code></p><p><code>954</code><code>  function execute(dtmConfig, integration) {</code></p><p><code>955</code><code>    for (var _i = 0, _Object$entries = Object.entries(integration.plugins); _i &lt; _Object$entries.length; _i++) {</code></p><p><code>956</code><code>      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),</code></p><p><code>957</code><code>        key = _Object$entries$_i[0],</code></p><p><code>958</code><code>        plugin = _Object$entries$_i[1];</code></p><p><code>959</code><code>      var pluginState = {};</code></p><p><code>960</code><code>      _extends(pluginState, dtmConfig);</code></p><p><code>961</code><code>      applyMappings(pluginState, plugin.mappings);</code></p><p><code>962</code><code>      if (integration.eventType === 'disco') {</code></p><p><code>963</code><code>        plugins[key].disco(pluginState, integration);</code></p><p><code>964</code><code>      }</code></p><p><code>965</code><code>      if (integration.eventType === 'final') {</code></p><p><code>966</code><code>        plugins[key].final(pluginState, integration);</code></p><p><code>967</code><code>      }</code></p><p><code>968</code><code>    }</code></p><p><code>969</code><code>  }</code></p><p><code>970</code><code>  function executePlugins(dtmConfig, integration) {</code></p><p><code>971</code><code>    integration.event_type = integration.event_type || 'disco';</code></p><p><code>972</code><code>    execute(dtmConfig, integration);</code></p><p><code>973</code><code>  }</code></p><p><code>974</code><code>          </code></p><p><code>975</code><code>  var integration = JSON.parse('{"eventType":"disco","env":{"tagProto":"https","tagHost":"login-ds.dotomi.com","tagPath":"/profile/visit/final/js","fpcWrite":false,"fpcRead":false,"fpcTagWrite":false,"cookieHost":"","cookieProto":"https","cookiePath":"","cookieDomain":"","cookieTagType":null},"parameters":{"dtm_user_agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.1418.52 Safari/537.36 Edg/107.0.1418.52","dtm_country_code":"PH","init_wl_code":"1","dtm_form_uid":"826206794962013265","dtm_dma_code":"-1","dtm_cmagic":"ab1fb5","tcflag":"true","dtm_cid":"81371","dtm_fid":"3569","dtm_use_flash_cookies":"false","wl_domains_key":"","dtm_zip_code":"1100","dtm_cookies_enabled":"false","fp_assignment_type":"-1","dtm_user_dc":"sin","dtm_current_dc":"","dtm_id_assgn_type":"3","dtm_state":"00","dtm_consent":"true"},"mappings":[{"conditionTree":null,"scope":"Client","source":"dtm_promo_id","destination":"cli_promo_id","type":"NAME","paused":false,"cnvrEnabled":false,"cjEnabled":false,"index":-1},{"conditionTree":null,"scope":"Client","source":"items","destination":"dtm_items","type":"NAME","paused":false,"cnvrEnabled":false,"cjEnabled":false,"index":-1},{"conditionTree":null,"scope":"Client","source":"dtmc_items","destination":"dtm_items","type":"NAME","paused":false,"cnvrEnabled":false,"cjEnabled":false,"index":-1},{"conditionTree":null,"scope":"Client","source":"dtm_items","destination":"dtm_items","type":"JSONURLENCODE","paused":false,"cnvrEnabled":false,"cjEnabled":false,"index":-1},{"conditionTree":null,"scope":"Client","source":"coupons","destination":"dtmc_coupons","type":"JSONURLENCODE","paused":false,"cnvrEnabled":false,"cjEnabled":false,"index":-1},{"conditionTree":null,"scope":"Client","source":"bypass_channel","destination":"dtmc_bypass_channel","type":"JSONURLENCODE","paused":false,"cnvrEnabled":false,"cjEnabled":false,"index":-1}],"persistence":null,"fieldMasks":["location_search","coupons","items","bypassChannel"],"plugins":{"cnvr":{"name":"cnvr","parameters":{},"mappings":[{"conditionTree":null,"scope":"Client","source":"location_search.dtm_em","destination":"dtm_email_hash","type":"QUERYSTRING","paused":false,"cnvrEnabled":false,"cjEnabled":false,"index":-1},{"conditionTree":null,"scope":"Client","source":"email_hash","destination":"dtm_email_hash","type":"NAME","paused":false,"cnvrEnabled":false,"cjEnabled":false,"index":-1},{"conditionTree":null,"scope":"Client","source":"confirmation_number","destination":"dtmc_transaction_id","type":"NAME","paused":false,"cnvrEnabled":false,"cjEnabled":false,"index":-1},{"conditionTree":null,"scope":"Client","source":"dtm_promo_id","destination":"cli_promo_id","type":"NAME","paused":false,"cnvrEnabled":false,"cjEnabled":false,"index":-1}],"fieldMasks":["confirmation_number","email_hash"],"data":null}}}');</code></p><p><code>976</code><code>  var discoveredDtmConfig = discover();</code></p><p><code>977</code><code>  var dtmConfig = {};</code></p><p><code>978</code><code>  if (integration.parameters) {</code></p><p><code>979</code><code>    applyStaticParameters(dtmConfig, integration.parameters);</code></p><p><code>980</code><code>  }</code></p><p><code>981</code><code>  applyStaticParameters(dtmConfig, discoveredDtmConfig);</code></p><p><code>982</code><code>  if (integration.env.fpcRead) {</code></p><p><code>983</code><code>    getValues(dtmConfig, integration);</code></p><p><code>984</code><code>  }</code></p><p><code>985</code><code>  applyMappings(dtmConfig, integration.mappings);</code></p><p><code>986</code><code>  executePlugins(dtmConfig, integration);</code></p><p><code>987</code><code>  if (integration.env.fpcWrite) {</code></p><p><code>988</code><code>    setValues(dtmConfig, integration);</code></p><p><code>989</code><code>  }</code></p><p><code>990</code><code>          </code></p><p><code>991</code><code>}());</code></p><div></div></main><iframe hidden="hidden" title="Hidden frame for spell checking" src="about:blank" id="iframeSpelling"></iframe></body></html>